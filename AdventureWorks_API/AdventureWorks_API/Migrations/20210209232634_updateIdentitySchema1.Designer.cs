// <auto-generated />
using System;
using AdventureWorks_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdventureWorks_API.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    [Migration("20210209232634_updateIdentitySchema1")]
    partial class updateIdentitySchema1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdventureWorks_API.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasColumnType("int")
                        .HasComment("Primary key for Address records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First street address line.")
                        .HasMaxLength(60);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second street address line.")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the city.")
                        .HasMaxLength(30);

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Postal code for the street address.")
                        .HasMaxLength(15);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of state or province.")
                        .HasMaxLength(50);

                    b.HasKey("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Address_rowguid");

                    b.HasIndex("StateProvince");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "StateProvince", "PostalCode", "CountryRegion");

                    b.ToTable("Address","SalesLT");

                    b.HasComment("Street address information for customers.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.BuildVersion", b =>
                {
                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasColumnName("Database Version")
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Version number of the database in 9.yy.mm.dd.00 format.")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<byte>("SystemInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SystemInformationID")
                        .HasColumnType("tinyint")
                        .HasComment("Primary key for BuildVersion records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.ToTable("BuildVersion");

                    b.HasComment("Current version number of the AdventureWorksLT 2008 sample database. ");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasComment("Primary key for Customer records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The customer's organization.")
                        .HasMaxLength(128);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("E-mail address for the person.")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person.")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person.")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Middle name or middle initial of the person.")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit")
                        .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasComment("Password for the e-mail account.")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasComment("Random value concatenated with the password string before the password is hashed.")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Phone number associated with the person.")
                        .HasMaxLength(25);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("SalesPerson")
                        .HasColumnType("nvarchar(256)")
                        .HasComment("The customer's sales person, an employee of AdventureWorks Cycles.")
                        .HasMaxLength(256);

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Surname suffix. For example, Sr. or Jr.")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(8)")
                        .HasComment("A courtesy title. For example, Mr. or Ms.")
                        .HasMaxLength(8);

                    b.HasKey("CustomerId");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Customer_rowguid");

                    b.ToTable("Customer","SalesLT");

                    b.HasComment("Customer information.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to Customer.CustomerID.");

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to Address.AddressID.");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The kind of Address. One of: Archive, Billing, Home, Main Office, Primary, Shipping")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK_CustomerAddress_CustomerID_AddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_CustomerAddress_rowguid");

                    b.ToTable("CustomerAddress","SalesLT");

                    b.HasComment("Cross-reference table mapping customers to their address(es).");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ErrorLogID")
                        .HasColumnType("int")
                        .HasComment("Primary key for ErrorLog records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLine")
                        .HasColumnType("int")
                        .HasComment("The line number at which the error occurred.");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("The message text of the error that occurred.")
                        .HasMaxLength(4000);

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int")
                        .HasComment("The error number of the error that occurred.");

                    b.Property<string>("ErrorProcedure")
                        .HasColumnType("nvarchar(126)")
                        .HasComment("The name of the stored procedure or trigger where the error occurred.")
                        .HasMaxLength(126);

                    b.Property<int?>("ErrorSeverity")
                        .HasColumnType("int")
                        .HasComment("The severity of the error that occurred.");

                    b.Property<int?>("ErrorState")
                        .HasColumnType("int")
                        .HasComment("The state number of the error that occurred.");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("The date and time at which the error occurred.");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The user who executed the batch in which the error occurred.")
                        .HasMaxLength(128);

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");

                    b.HasComment("Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("int")
                        .HasComment("Primary key for Product records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Product color.")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was discontinued.");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product.")
                        .HasMaxLength(50);

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnName("ProductCategoryID")
                        .HasColumnType("int")
                        .HasComment("Product is a member of this product category. Foreign key to ProductCategory.ProductCategoryID. ");

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID")
                        .HasColumnType("int")
                        .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Unique product identification number.")
                        .HasMaxLength(25);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was no longer available for sale.");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was available for sale.");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Product size.")
                        .HasMaxLength(5);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money")
                        .HasComment("Standard cost of the product.");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Small image of the product.");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Small image file name.")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)")
                        .HasComment("Product weight.");

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Product_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasName("AK_Product_ProductNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Product_rowguid");

                    b.ToTable("Product","SalesLT");

                    b.HasComment("Products sold or used in the manfacturing of sold products.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductCategoryID")
                        .HasColumnType("int")
                        .HasComment("Primary key for ProductCategory records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category description.")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnName("ParentProductCategoryID")
                        .HasColumnType("int")
                        .HasComment("Product category identification number of immediate ancestor category. Foreign key to ProductCategory.ProductCategoryID.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductCategory_Name");

                    b.HasIndex("ParentProductCategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory","SalesLT");

                    b.HasComment("High-level product categorization.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductDescriptionID")
                        .HasColumnType("int")
                        .HasComment("Primary key for ProductDescription records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of the product.")
                        .HasMaxLength(400);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription","SalesLT");

                    b.HasComment("Product descriptions in several languages.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductModelID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex("CatalogDescription")
                        .HasName("PXML_ProductModel_CatalogDescription");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel","SalesLT");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ProductModelProductDescription", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnName("ProductDescriptionID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to ProductDescription.ProductDescriptionID.");

                    b.Property<string>("Culture")
                        .HasColumnType("nchar(6)")
                        .IsFixedLength(true)
                        .HasComment("The culture for which the description is written")
                        .HasMaxLength(6);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "Culture")
                        .HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModelProductDescription_rowguid");

                    b.ToTable("ProductModelProductDescription","SalesLT");

                    b.HasComment("Cross-reference table mapping product descriptions and the language the description is written in.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID")
                        .HasColumnType("int")
                        .HasComment("Primary key. One incremental unique number per product sold.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38, 6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))")
                        .HasComment("Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint")
                        .HasComment("Quantity ordered per product.");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int")
                        .HasComment("Product sold to customer. Foreign key to Product.ProductID.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price of a single product.");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money")
                        .HasComment("Discount amount.");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderDetail_rowguid");

                    b.ToTable("SalesOrderDetail","SalesLT");

                    b.HasComment("Individual products associated with a specific sales order. See SalesOrderHeader.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasColumnType("int")
                        .HasComment("Primary key.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Financial accounting number reference.")
                        .HasMaxLength(15);

                    b.Property<int?>("BillToAddressId")
                        .HasColumnName("BillToAddressID")
                        .HasColumnType("int")
                        .HasComment("The ID of the location to send invoices.  Foreign key to the Address table.");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Sales representative comments.");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasColumnType("varchar(15)")
                        .HasComment("Approval code provided by the credit card company.")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasComment("Customer identification number. Foreign key to Customer.CustomerID.");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order is due to the customer.");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Shipping cost.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Dates the sales order was created.");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Customer purchase order number reference. ")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint")
                        .HasComment("Incremental number to track changes to the sales order over time.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID],0),N'*** ERROR ***'))")
                        .HasComment("Unique sales order identification number.")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order was shipped to the customer.");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.")
                        .HasMaxLength(50);

                    b.Property<int?>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID")
                        .HasColumnType("int")
                        .HasComment("The ID of the location to send goods.  Foreign key to the Address table.");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Tax amount.");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))")
                        .HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("ShipToAddressId");

                    b.ToTable("SalesOrderHeader","SalesLT");

                    b.HasComment("General sales order information.");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.CustomerAddress", b =>
                {
                    b.HasOne("AdventureWorks_API.Models.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId")
                        .IsRequired();

                    b.HasOne("AdventureWorks_API.Models.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks_API.Models.Product", b =>
                {
                    b.HasOne("AdventureWorks_API.Models.ProductCategory", "ProductCategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("AdventureWorks_API.Models.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ProductCategory", b =>
                {
                    b.HasOne("AdventureWorks_API.Models.ProductCategory", "ParentProductCategory")
                        .WithMany("InverseParentProductCategory")
                        .HasForeignKey("ParentProductCategoryId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");
                });

            modelBuilder.Entity("AdventureWorks_API.Models.ProductModelProductDescription", b =>
                {
                    b.HasOne("AdventureWorks_API.Models.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductDescriptionId")
                        .IsRequired();

                    b.HasOne("AdventureWorks_API.Models.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductModelId")
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks_API.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("AdventureWorks_API.Models.Product", "Product")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("AdventureWorks_API.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks_API.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("AdventureWorks_API.Models.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");

                    b.HasOne("AdventureWorks_API.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("AdventureWorks_API.Models.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");
                });
#pragma warning restore 612, 618
        }
    }
}
